
import { db, auth, collection, addDoc, getDocs, doc, deleteDoc, getDoc, setDoc, serverTimestamp } from "./firebase-config.js";
import { onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.8.1/firebase-auth.js";

document.addEventListener("DOMContentLoaded", function () {
    console.log("üì¢ Page Loaded: Upload.js initialized");

    const uploadBtn = document.getElementById("upload-btn");
    if (uploadBtn) {
        console.log("‚úÖ Upload button found");
        
        const fileInput = document.createElement("input");
        fileInput.type = "file";
        fileInput.accept = "image/*";
        fileInput.style.display = "none";
        document.body.appendChild(fileInput);

        uploadBtn.addEventListener("click", function () {
            console.log("üì∏ Upload button clicked!");
            fileInput.click();
        });

        fileInput.addEventListener("change", function (event) {
            const file = event.target.files[0];
            if (file) {
                console.log("üìÇ File selected:", file.name);
                showUploadForm(file);
            }
        });
    } else {
        console.log("‚ùå Upload button not found");
    }

    function showUploadForm(file) {
        console.log("üñºÔ∏è Displaying preview modal...");

        const modal = document.createElement("div");
        modal.classList.add("upload-modal");

        modal.innerHTML = `
            <div class="modal-content">
                <h3>Upload Photo</h3>
                <img id="preview-image" class="preview-image">
                <input type="text" id="album-name" placeholder="Enter Album Name (Optional)">
                <div class="modal-buttons">
                    <button id="confirm-upload">Upload</button>
                    <button id="cancel-upload">Cancel</button>
                </div>
            </div>
        `;

        document.body.appendChild(modal);

        const reader = new FileReader();
        reader.readAsDataURL(file);

        reader.onload = function (e) {
            document.getElementById("preview-image").src = e.target.result;
        };

        document.getElementById("cancel-upload").addEventListener("click", function () {
            document.body.removeChild(modal);
        });

        document.getElementById("confirm-upload").addEventListener("click", function () {
            const albumName = document.getElementById("album-name").value.trim();
            saveImageData(albumName, file);
            document.body.removeChild(modal);
        });
    }

    async function saveImageData(albumName, file) {
        console.log("üì§ Uploading image to Firestore...");

        // Ensure user is logged in before uploading
        onAuthStateChanged(auth, async (user) => {
            if (!user) {
                console.error("‚ùå User not authenticated!");
                alert("You must be logged in to upload photos.");
                return;
            }

            const reader = new FileReader();
            reader.readAsDataURL(file);

            reader.onload = async function (e) {
                try {
                    const imageUrl = e.target.result;

                    // Determine the album name
                    const finalAlbum = albumName || "Uncategorized";

                    // Save to Firestore
                    const docRef = await addDoc(collection(db, "photos"), {
                        imageUrl: imageUrl,
                        album: finalAlbum,
                        timestamp: serverTimestamp(),
                        userId: user.uid,
                        email: user.email
                    });

                    console.log(`‚úÖ Image saved to album "${finalAlbum}" with ID: ${docRef.id}`);
                    
                    // Refresh the image display based on current page
                    const currentPath = window.location.pathname;
                    
                    if (currentPath.includes("index.html") || currentPath === "/" || currentPath.endsWith("/")) {
                        // Only refresh if we're on the home page and the album is Uncategorized
                        if (finalAlbum === "Uncategorized") {
                            console.log("üîÑ Refreshing home page photos...");
                            fetchPhotosFromFirestore();
                        }
                    } else if (currentPath.includes("albums.html")) {
                        // On albums page, refresh the albums display
                        console.log("üîÑ Refreshing albums...");
                        if (typeof displayAlbums === 'function') {
                            displayAlbums();
                        } else {
                            // If the function doesn't exist, reload the page
                            location.reload();
                        }
                    }
                    
                } catch (error) {
                    console.error("‚ùå Error saving image to Firestore:", error);
                    alert("Failed to upload image: " + error.message);
                }
            };
        });
    }

    // Define the fetchPhotosFromFirestore function to be used globally
    window.fetchPhotosFromFirestore = async function() {
        console.log("üîÑ Loading images from Firestore...");
        const photoGrid = document.getElementById("photo-grid");
        if (!photoGrid) {
            console.error("‚ùå Photo grid not found!");
            return;
        }

        // Clear existing content
        photoGrid.innerHTML = "";

        // Ensure user is logged in before loading images
        const user = auth.currentUser;
        if (!user) {
            console.log("‚ö†Ô∏è User not authenticated, cannot load images");
            photoGrid.innerHTML = "<p class='no-auth'>Please sign in to view your photos.</p>";
            return;
        }

        try {
            const querySnapshot = await getDocs(collection(db, "photos"));
            if (querySnapshot.empty) {
                console.log("‚ÑπÔ∏è No images found in Firestore.");
                photoGrid.innerHTML = "<p class='no-photos'>No photos uploaded yet.</p>";
                return;
            }

            let imagesFound = false;
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                console.log(doc.data());
                


                // Only show images for the current user AND only uncategorized images on home page
                if (data.userId === user.uid && data.album === "Uncategorized") {
                    imagesFound = true;

                    const photoItem = document.createElement("div");
                    photoItem.classList.add("photo-item");
                    photoItem.setAttribute("data-photo-id", doc.id);
                    photoItem.style.position = 'relative'; // Add position relative

                    // Format the timestamp if it exists
                    let timeDisplay = "Just now";
                    if (data.timestamp) {
                        const date = data.timestamp.toDate();
                        timeDisplay = date.toLocaleString();
                    }

                    photoItem.innerHTML = `
                        <img src="${data.imageUrl}" alt="Uploaded Photo">
                        <div class="photo-info">
                            <span class="album-name">${data.album}</span>
                            <span class="timestamp">${timeDisplay}</span>
                        </div>
                        <div class="photo-actions">
                            <button class="like-btn">Like</button>
                            <button class="comment-btn">Comment</button>
                            <button class="share-btn">Share</button>
                            <button class="delete-btn" data-id="${doc.id}" style="background-color: #dc3545; color: white; padding: 8px 15px; border-radius: 5px; border: none; cursor: pointer; display: inline-block; margin-top: 5px;">Delete</button>
                        </div>
                    `;

                    photoGrid.appendChild(photoItem);
                    
                    // Add delete event listener
                    const deleteBtn = photoItem.querySelector(".delete-btn");
                    console.log("Delete button found:", deleteBtn);
                    if (deleteBtn) {
                        deleteBtn.addEventListener("click", function(e) {
                            e.stopPropagation();
                            const photoId = this.getAttribute("data-id");
                            deletePhoto(photoId, photoItem);
                        });
                    }
                }
            });

            if (!imagesFound) {
                photoGrid.innerHTML = "<p class='no-photos'>No uncategorized photos found.</p>";
            }

            console.log("‚úÖ Images loaded successfully!");
            
            // Run our custom function to add floating delete buttons
            setTimeout(addFloatingDeleteButtons, 500);
            
        } catch (error) {
            console.error("‚ùå Error loading images:", error);
            photoGrid.innerHTML = "<p class='error'>Error loading photos: " + error.message + "</p>";
        }
    };

    // Function to load album photos
    window.loadAlbumPhotos = async function(albumName) {
        console.log(`üîÑ Loading photos for album: ${albumName}`);
        const photoGrid = document.getElementById("photo-grid");
        const albumTitle = document.getElementById("album-title");
        
        if (!photoGrid || !albumTitle) {
            console.error("‚ùå Elements not found!");
            return;
        }

        // Update the album title
        albumTitle.textContent = albumName;
        
        // Clear existing content
        photoGrid.innerHTML = "";

        // Ensure user is logged in
        const user = auth.currentUser;
        if (!user) {
            console.log("‚ö†Ô∏è User not authenticated, cannot load images");
            photoGrid.innerHTML = "<p class='no-auth'>Please sign in to view your photos.</p>";
            return;
        }

        try {
            const querySnapshot = await getDocs(collection(db, "photos"));
            if (querySnapshot.empty) {
                console.log("‚ÑπÔ∏è No images found in Firestore.");
                photoGrid.innerHTML = "<p class='no-photos'>No photos in this album.</p>";
                return;
            }

            let imagesFound = false;
            querySnapshot.forEach((doc) => {
                const data = doc.data();

                // Only show images for the current user AND for the selected album
                if (data.userId === user.uid && data.album === albumName) {
                    imagesFound = true;

                    const photoItem = document.createElement("div");
                    photoItem.classList.add("photo-item");
                    photoItem.setAttribute("data-photo-id", doc.id);
                    photoItem.style.position = 'relative'; // Add position relative

                    // Format the timestamp if it exists
                    let timeDisplay = "Just now";
                    if (data.timestamp) {
                        const date = data.timestamp.toDate();
                        timeDisplay = date.toLocaleString();
                    }

                    photoItem.innerHTML = `
                        <img src="${data.imageUrl}" alt="Uploaded Photo">
                        <div class="photo-info">
                            <span class="timestamp">${timeDisplay}</span>
                        </div>
                        <div class="photo-actions">
                            <button class="like-btn">Like</button>
                            <button class="comment-btn">Comment</button>
                            <button class="share-btn">Share</button>
                            <button class="delete-btn" data-id="${doc.id}" style="background-color: #dc3545; color: white; padding: 8px 15px; border-radius: 5px; border: none; cursor: pointer; display: inline-block; margin-top: 5px;">Delete</button>
                        </div>
                    `;

                    photoGrid.appendChild(photoItem);
                    
                    // Add delete event listener
                    const deleteBtn = photoItem.querySelector(".delete-btn");
                    if (deleteBtn) {
                        deleteBtn.addEventListener("click", function(e) {
                            e.stopPropagation();
                            const photoId = this.getAttribute("data-id");
                            deletePhoto(photoId, photoItem);
                        });
                    }
                }
            });

            if (!imagesFound) {
                photoGrid.innerHTML = "<p class='no-photos'>No photos found in this album.</p>";
            }

            console.log("‚úÖ Album photos loaded successfully!");
            
            // Run our custom function to add floating delete buttons
            setTimeout(addFloatingDeleteButtons, 500);
            
        } catch (error) {
            console.error("‚ùå Error loading album photos:", error);
            photoGrid.innerHTML = "<p class='error'>Error loading photos: " + error.message + "</p>";
        }
    };

    // Function to display albums
    window.displayAlbums = async function() {
        console.log("üîÑ Loading albums...");
        const albumsContainer = document.getElementById("albums-container");
        
        if (!albumsContainer) {
            console.error("‚ùå Albums container not found!");
            return;
        }

        // Clear existing content
        albumsContainer.innerHTML = "";

        // Ensure user is logged in
        const user = auth.currentUser;
        if (!user) {
            console.log("‚ö†Ô∏è User not authenticated, cannot load albums");
            albumsContainer.innerHTML = "<p class='no-auth'>Please sign in to view your albums.</p>";
            return;
        }

        try {
            // Get all photos
            const querySnapshot = await getDocs(collection(db, "photos"));
            
            // Track albums and their photos
            const albums = new Map();
            
            // Group photos by album
            querySnapshot.forEach((doc) => {
                const data = doc.data();
                
                // Only include current user's photos
                if (data.userId === user.uid && data.album !== "Uncategorized") {
                    if (!albums.has(data.album)) {
                        albums.set(data.album, []);
                    }
                    
                    albums.get(data.album).push({
                        id: doc.id,
                        ...data
                    });
                }
            });
            
            // Display albums
            if (albums.size === 0) {
                albumsContainer.innerHTML = "<p class='no-albums'>No albums created yet.</p>";
                return;
            }
            
            albums.forEach((photos, albumName) => {
                // Create album card
                const albumCard = document.createElement("div");
                albumCard.classList.add("album-card");
                
                // Use the first photo as the album cover
                const coverImage = photos.length > 0 ? photos[0].imageUrl : "assets/default-album.png";
                
                albumCard.innerHTML = `
                    <img src="${coverImage}" alt="${albumName}">
                    <h3>${albumName}</h3>
                    <p>${photos.length} photo${photos.length !== 1 ? 's' : ''}</p>
                `;
                
                // Add click event to view album photos
                albumCard.addEventListener("click", function() {
                    loadAlbumPhotos(albumName);
                });
                
                albumsContainer.appendChild(albumCard);
            });
            
            console.log("‚úÖ Albums loaded successfully!");
        } catch (error) {
            console.error("‚ùå Error loading albums:", error);
            albumsContainer.innerHTML = "<p class='error'>Error loading albums: " + error.message + "</p>";
        }
    };

    // Function to delete a photo
    async function deletePhoto(photoId, photoElement) {
        if (!confirm("Are you sure you want to delete this photo?")) {
            return;
        }
        
        try {
            console.log(`üóëÔ∏è Deleting photo with ID: ${photoId}`);
            
            // Delete from Firestore
            await deleteDoc(doc(db, "photos", photoId));
            
            // Remove element from DOM
            photoElement.remove();
            
            console.log("‚úÖ Photo deleted successfully!");
            
            // Check if we're on the albums page and need to refresh album display
            if (window.location.pathname.includes("albums.html")) {
                // Refresh albums if we're on the albums page
                displayAlbums();
            }
            
        } catch (error) {
            console.error("‚ùå Error deleting photo:", error);
            alert("Failed to delete photo: " + error.message);
        }
    }

    // // NEW CODE: Function to add floating delete buttons to all photos
    // function addFloatingDeleteButtons() {
    //     console.log("Checking for photos without delete buttons...");
        
    //     // Get all photo items
    //     const photoItems = document.querySelectorAll('.photo-item');
    //     console.log(`Found ${photoItems.length} photo items`);
        
    //     if (photoItems.length === 0) {
    //         return; // No photos to process
    //     }
        
    //     // Process each photo item
    //     photoItems.forEach((photoItem) => {
    //         const photoId = photoItem.getAttribute('data-photo-id');
            
    //         // Check if this photo already has our custom delete button
    //         if (!photoItem.querySelector('.custom-delete-btn')) {
    //             console.log(`Adding custom delete button to photo ${photoId}`);
                
    //             // Make sure photo item has position relative
    //             photoItem.style.position = 'relative';
                
    //             // Create a new delete button
    //             const deleteBtn = document.createElement('button');
    //             deleteBtn.className = 'custom-delete-btn';
    //             deleteBtn.setAttribute('data-id', photoId);
    //             deleteBtn.textContent = '√ó';
                
    //             // Apply styles directly to the button
    //             deleteBtn.style.position = 'absolute';
    //             deleteBtn.style.top = '10px';
    //             deleteBtn.style.right = '10px';
    //             deleteBtn.style.backgroundColor = '#dc3545';
    //             deleteBtn.style.color = 'white';
    //             deleteBtn.style.border = 'none';
    //             deleteBtn.style.borderRadius = '50%';
    //             deleteBtn.style.width = '30px';
    //             deleteBtn.style.height = '30px';
    //             deleteBtn.style.fontSize = '20px';
    //             deleteBtn.style.fontWeight = 'bold';
    //             deleteBtn.style.cursor = 'pointer';
    //             deleteBtn.style.zIndex = '999';
    //             deleteBtn.style.display = 'flex';
    //             deleteBtn.style.alignItems = 'center';
    //             deleteBtn.style.justifyContent = 'center';
                
    //             // Add event listener
    //             deleteBtn.addEventListener('click', function(e) {
    //                 e.stopPropagation();
    //                 const photoId = this.getAttribute("data-id");
    //                  console.log("Deleting photo with ID:", photoId);
    //                 console.log(`Custom delete button clicked for photo ${photoId}`);
                    
    //                 if (confirm('Are you sure you want to delete this photo?')) {
    //                     console.log(`Confirmed delete for photo ${photoId}`);
    //                     // Call the delete function
    //                     deletePhotoById(photoId, photoItem);
    //                 }
    //             });
                
    //             // Add button to photo item
    //             photoItem.appendChild(deleteBtn);
    //         }
    //     });
    // }

    // // NEW CODE: Define a standalone delete function that doesn't rely on existing code
    // async function deletePhotoById(photoId, photoElement) {
    //     console.log(`Deleting photo with ID: ${photoId}`);
        
    //     try {
    //         // Delete from Firestore
    //         await deleteDoc(doc(db, "photos", photoId));
            
    //         // Remove element from DOM
    //         if (photoElement) {
    //             photoElement.remove();
    //         }
            
    //         console.log("Photo deleted successfully!");
            
    //         // Check if we're on the albums page and need to refresh album display
    //         if (window.location.pathname.includes("albums.html") && typeof displayAlbums === 'function') {
    //             displayAlbums();
    //         }
            
    //     } catch (error) {
    //         console.error("Error deleting photo:", error);
    //         alert("Failed to delete photo: " + error.message);
    //     }
    // }

    // NEW CODE: Run the function on page load and then periodically
    // Run once after a delay to ensure photos are loaded
    // setTimeout(addFloatingDeleteButtons, 1000);
    
    // // Then run every 3 seconds to catch any new photos
    // setInterval(addFloatingDeleteButtons, 3000);

    // // NEW CODE: Also run when photos might have been added
    // document.addEventListener('click', function(e) {
    //     // Run after any click that might load new photos
    //     setTimeout(addFloatingDeleteButtons, 500);
    // });

    // // Initialize page-specific functionality
    // const currentPath = window.location.pathname;
});


----------------------------------
 /* General Styles */

 html, body {
  height: 100%;
  margin: 0;
  display: flex;
  flex-direction: column;
}
body {
  font-family: 'Poppins', sans-serif;
  margin: 0;
  padding: 0;
  background-color: #f8f9fa;
  color: #333;
  line-height: 1.6;
}


/* Delete Button Style */
.delete-btn {
  background-color: #dc3545 !important;
  color: white;
  border: none;
  padding: 8px 15px;
  border-radius: 5px;
  cursor: pointer;
  display: block; /* or inline-block */
  visibility: visible;
  transition: background-color 0.3s ease;
}

.delete-btn:hover {
  background-color: #c82333 !important;
}

/* Confirmation Dialog Styling */
.confirmation-dialog {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0 4px 15px rgba(0, 0, 0);
}

/* Navbar Styles */
header nav{
  background-color: #ffffff;
  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  position: sticky;
  top: 0;
  z-index: 1000;
}

nav {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 15px 30px;
  max-width: 1200px;
  margin: 0 auto;
}

.logo a {
  font-size: 28px;
  font-weight: 700;
  color: #007bff;
  text-decoration: none;
  transition: color 0.3s ease;
}

.logo a:hover {
  color: #0056b3;
}

.nav-links {
  list-style: none;
  display: flex;
  gap: 25px;
  margin: 0;
  padding: 0;
}

.nav-links li a {
  color: #333;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.3s ease;
}

.nav-links li a:hover {
  color: #007bff;
}

.search-bar {
  display: flex;
  align-items: center;
  gap: 10px;
}

.search-bar input {
  padding: 8px 12px;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 14px;
  width: 200px;
}

.search-bar button {
  padding: 8px 12px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.search-bar button:hover {
  background-color: #0056b3;
}

/* Photo Grid */
/* General Styles */
html, body {
  height: 100%;
  margin: 0;
  display: flex;
  flex-direction: column;
}

body {
  font-family: 'Poppins', sans-serif;
  background-color: #f8f9fa;
  color: #333;
}

/* Photo Grid */
#photo-grid,#albums-grid {
  display: grid;
  grid-template-columns: repeat(auto-fill, minmax(250px, 1fr));
  gap: 25px;
  padding: 30px;
  max-width: 1200px;
  margin: 0 auto;
}

.photo-item {
  display: flex;
  flex-direction: column;
  background-color: #fff;
  border: 1px solid #ddd;
  border-radius: 12px;
  overflow: hidden;
  box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
  transition: transform 0.3s ease, box-shadow 0.3s ease;
  padding: 15px;
  max-width: 250px;
}

.photo-item:hover {
  transform: translateY(-5px);
  box-shadow: 0 6px 12px rgba(0, 0, 0, 0.15);
}

.photo-item img {
  width: 200px;
  height: 200px;
  object-fit: cover;
  border-radius: 8px;
}

/* Photo Actions */
.photo-actions {
  display: flex;
  flex-wrap: wrap;
  justify-content: space-around;
  padding: 10px 5px;
  gap: 5px;
}

.photo-actions button {
  background-color: #007bff;
  color: white;
  border: none;
  padding: 8px 15px;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
}

.photo-actions button:hover {
  background-color: #0056b3;
}

.photo-thumbnail {
  width: 100%;
  height: 150px;
  object-fit: cover;
  border-radius: 5px;
  cursor: pointer;
  transition: transform 0.2s;
}

.photo-thumbnail:hover {
  transform: scale(1.05);
}

.content {
  flex: 1; /* Pushes footer to bottom */
}

footer {
  text-align: center;
  padding: 10px;
  background-color: #333;
  color: #fff;
  width: 100%;
}







.upload-button {
  position: fixed;
  bottom: 20px;
  right: 20px;
  width: 60px;
  height: 60px;
  background-color: #007bff;
  color: white;
  font-size: 30px;
  text-align: center;
  border-radius: 50%;
  box-shadow: 0px 4px 6px rgba(0, 0, 0, 0.2);
  cursor: pointer;
  transition: transform 0.2s ease-in-out;
  display: flex;
  justify-content: center;
  align-items: center;
  border: none;
}

.upload-button:hover {
  transform: scale(1.1);
  background-color: #0056b3;
}

.upload-button:focus {
  outline: none;
}

.upload-modal {
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  background: white;
  padding: 20px;
  border-radius: 10px;
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.2);
  text-align: center;
  width: 300px;
}

.upload-modal h3 {
  margin-bottom: 10px;
}

.upload-modal input {
  display: block;
  width: 90%;
  padding: 8px;
  margin: 8px auto;
  border: 1px solid #ccc;
  border-radius: 5px;
}

.upload-modal button {
  background: #007bff;
  color: white;
  border: none;
  padding: 10px;
  margin: 5px;
  cursor: pointer;
  border-radius: 5px;
}

.upload-modal button:hover {
  background: #0056b3;
}

.preview-image {
  width: 100%;
  max-height: 200px;
  object-fit: cover;
  margin-bottom: 10px;
  border-radius: 5px;
}




/* ========== Albums Grid ========== */
.albums-grid {
  padding: 20px;
}

#albums-container {
  display: flex;
  flex-wrap: wrap;
  gap: 20px;
}

.album-card {
  width: 200px;
  background: white;
  padding: 15px;
  border-radius: 8px;
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
  cursor: pointer;
  transition: transform 0.2s ease-in-out;
  text-align: center;
}

.album-card:hover {
  transform: scale(1.05);
}

.album-card img {
  width: 100%;
  height: 150px;
  object-fit: cover;
  border-radius: 5px;
}


button {
  cursor: pointer;
  padding: 10px;
  margin-top: 10px;
}

/* Login & Signup Form */
.auth-form {
  max-width: 400px;
  margin: auto;
  padding: 40px;
  background: #fff;
  box-shadow: 0px 4px 8px rgba(0, 0, 0, 0.1);
  border-radius: 10px;
  text-align: center;
  margin-top: 5%;
}

.auth-form h2 {
  margin-bottom: 20px;
  font-size: 24px;
  color: #333;
}

.auth-form input {
  width: 100%;
  padding: 10px;
  margin: 10px 0;
  border: 1px solid #ddd;
  border-radius: 5px;
  font-size: 16px;
}

.auth-form button {
  width: 100%;
  padding: 10px;
  background-color: #007bff;
  color: #fff;
  border: none;
  border-radius: 5px;
  cursor: pointer;
  transition: background-color 0.3s ease;
  font-size: 16px;
  margin-top: 10px;
}

.auth-form button:hover {
  background-color: #0056b3;
}

.auth-form p {
  margin-top: 15px;
  font-size: 14px;
}

.auth-form a {
  color: #007bff;
  text-decoration: none;
}

.auth-form a:hover {
  text-decoration: underline;
}

/* Responsive Design */
@media (max-width: 600px) {
  .auth-form {
    width: 90%;
  }
}

.container img {
  max-width: 150px; /* Adjust as needed */
  height: auto;
  display: block;
}
.container {
  display: flex;
  align-items: center;
}

.profile-img {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  object-fit: cover;
}

